import SciLean.Data.DataArray

open SciLean


/-- info: ⊞[4.000000, 5.000000, 6.000000] -/
#guard_msgs in
#eval ⊞[1.0,2.0,3.0;4,5,6].curry[(⟨1,sorry_proof⟩ : Idx 2)]


/-- info: ⊞[⊞[0.000000, 100.000000, 200.000000], ⊞[1.000000, 101.000000, 201.000000]] -/
#guard_msgs in
#eval ⊞ (i : Idx 2) => ⊞ (j : Idx 3) => (i.1+j.1*100).toNat.toFloat

/-- info: ⊞[⊞[1.000000, 2.000000], ⊞[3.000000, 4.000000]] -/
#guard_msgs in
#eval ⊞[⊞[1.0,2.0],⊞[3.0,4.0]]

/-- info: ⊞[⊞[-1.000000, -2.000000], ⊞[-3.000000, -4.000000]] -/
#guard_msgs in
#eval -⊞[⊞[1.0,2.0],⊞[3.0,4.0]]

/-- info: ⊞[⊞[11.000000, 102.000000], ⊞[1003.000000, 1004.000000]] -/
#guard_msgs in
#eval ⊞[⊞[1.0,2.0],⊞[3.0,4.0]] + ⊞[⊞[10.0,100.0],⊞[1000.0,1000.0]]

/-- info: ⊞[⊞[-9.000000, -98.000000], ⊞[-997.000000, -996.000000]] -/
#guard_msgs in
#eval ⊞[⊞[1.0,2.0],⊞[3.0,4.0]] - ⊞[⊞[10.0,100.0],⊞[1000.0,1000.0]]

/-- info: ⊞[⊞[1.000000, 2.000000], ⊞[10.000000, 100.000000]] -/
#guard_msgs in
#eval setElem ⊞[⊞[1.0,2.0],⊞[3.0,4.0]] (1 : Idx 2) ⊞[10.0,100.0] .intro

/-- info: ⊞[3.000000, 4.000000] -/
#guard_msgs in
#eval ⊞[⊞[1.0,2.0],⊞[3.0,4.0]][1]

/-- info: ⊞[⊞[1.000000, 1.000000], ⊞[1.000000, 1.000000]] -/
#guard_msgs in
#eval (VectorType.const 1 : Float^[2]^[2])

/-- info: ⊞[⊞[2.000000, 4.000000], ⊞[6.000000, 8.000000]] -/
#guard_msgs in
#eval 2 • ⊞[⊞[1.0,2.0],⊞[3.0,4.0]]
